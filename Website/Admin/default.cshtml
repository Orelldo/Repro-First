@{
    Page.Title = "Admin Page";
    Layout = "~/_SiteLayout.cshtml";
}

<div>
    <h1>
        Admin Page
        <small>Demo forms for CRUD in Razor</small>
    </h1>

    <dl>
        <dt><a href="~/Admin/SearchProductByCategory.cshtml">Search Products by Category</a></dt>
        <dd>
            This page demos looking up data from the database and sdisplaying the contents in a WebGrid. It includes customizing
            the WebGrid to generate links for each product that go to the <b>Manage Products</b> page passing the product ID as a query string
        </dd>

        <dt><a href="~/Admin/SearchProductBySupplier.cshtml">Search Products by Supplier</a></dt>
        <dd>
            This is similar to the <b>Search Products By Category</b> page and is left for the student to generate.
            The SQL Query to get the suppliers is <code>SELECT SupplierID, CompanyName FROM Suppliers ORDER BY CompanyName</code>
            and the SQL to get the product is <code>SELECT ProductID, ProductName, QuantityPerUnit,UnitPrice, UnitsInStock FROM Products WHERE SupplierID = @@0</code>
        </dd>

        <dt><a href="~/Admin/SearchProductByName.cshtml">Search Products by Partial Product Name</a></dt>
        <dd>In this demo, we will see how to properly include SQL wildcards in a search within Razor.</dd>

        <dt><a href="~/Admin/ManageProducts.cshtml">Manage Products</a></dt>
        <dd>
            This is a "catch-all" page that performs all CRUD operations on the products (Including handling query string page-redirects from other pages).
        </dd>

        <dt><a href="~/Admin/ManageCategories.cshtml">Manage Categories</a></dt>
        <dd>In this sample, we see a CRUD page that manages categories, including handling the display of images from the database and uploading images.</dd>

        <dt><a href="~/Admin/ManageSupplier.cshtml">Manage Suppliers</a></dt>
        <dd>In this sample, the Suppliers are maintained in a simple CRUD form.</dd>
    </dl>
</div>